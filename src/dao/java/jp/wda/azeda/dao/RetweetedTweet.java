package jp.wda.azeda.dao;

import java.io.Serializable;
import java.sql.Timestamp;

import org.seasar.dao.annotation.tiger.Bean;
import org.seasar.dao.annotation.tiger.Column;
import org.seasar.dao.annotation.tiger.Relation;

/**
 * リツイートされたつぶやき モデルクラス.
 *
 * @author generated by ERMaster
 * @version $Id$
 */
@Bean(table="RetweetedTweets")
public class RetweetedTweet implements Serializable {
	/** */
	private static final long serialVersionUID = 1229307930308890759L;

	/** ユーザID. */
	private Long userID;

	/** アクセストークン. */
	private StoredAccessToken accessToken;

	/** ツイートID. */
	private Long tweetID;

	/** 登録日時. */
	private Timestamp registeredAt;

	/**
	 * コンストラクタ.
	 */
	public RetweetedTweet() {
	}

	/**
	 * ユーザID を設定します.
	 *
	 * @param userid
	 *            ユーザID
	 */
	public void setUserID(Long userid) {
		this.userID = userid;
	}

	/**
	 * ユーザID を取得します.
	 *
	 * @return ユーザID
	 */
	@Column("UserID")
	public Long getUserID() {
		return this.userID;
	}

	/**
	 * ツイートID を設定します.
	 *
	 * @param tweetid
	 *            ツイートID
	 */
	public void setTweetID(Long tweetid) {
		this.tweetID = tweetid;
	}

	/**
	 * ツイートID を取得します.
	 *
	 * @return ツイートID
	 */
	@Column("tweetid")
	public Long getTweetID() {
		return this.tweetID;
	}

	/**
	 * 登録日時 を設定します.
	 *
	 * @param registeredat
	 *            登録日時
	 */
	public void setRegisteredAt(Timestamp registeredat) {
		this.registeredAt = registeredat;
	}

	/**
	 * 登録日時 を取得します.
	 *
	 * @return 登録日時
	 */
	@Column("registeredat")
	public Timestamp getRegisteredAt() {
		return this.registeredAt;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());
		result = prime * result + ((tweetID == null) ? 0 : tweetID.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		RetweetedTweet other = (RetweetedTweet) obj;
		if (accessToken == null) {
			if (other.accessToken != null) {
				return false;
			}
		} else if (!accessToken.equals(other.accessToken)) {
			return false;
		}
		if (tweetID == null) {
			if (other.tweetID != null) {
				return false;
			}
		} else if (!tweetID.equals(other.tweetID)) {
			return false;
		}
		return true;
	}

	/**
	 * アクセストークン を設定します.
	 *
	 * @param accesstokens
	 *            アクセストークン
	 */
	@Relation(relationNo = 0, relationKey = "UserID")
	public void setAccessToken(StoredAccessToken accesstokens) {
		this.accessToken = accesstokens;
	}

	/**
	 * アクセストークン を取得します.
	 *
	 * @return アクセストークン
	 */
	public StoredAccessToken getAccessToken() {
		return this.accessToken;
	}

}
