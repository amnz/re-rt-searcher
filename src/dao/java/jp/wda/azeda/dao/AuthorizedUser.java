package jp.wda.azeda.dao;

import java.io.Serializable;
import java.sql.Timestamp;

import org.seasar.dao.annotation.tiger.Bean;
import org.seasar.dao.annotation.tiger.Column;
import org.seasar.dao.annotation.tiger.Relation;

/**
 * 認証済みユーザ モデルクラス.
 *
 * @author generated by ERMaster
 * @version $Id$
 */
@Bean(table="AuthorizedUsers")
public class AuthorizedUser implements Serializable {
	/** */
	private static final long serialVersionUID = -8376997485473343602L;

	/** 認証済みトークン. */
	private String rememberMe;

	/** ユーザID. */
	private Long userID;

	/** 登録日時. */
	private Timestamp registeredAt;

	/**
	 * コンストラクタ.
	 */
	public AuthorizedUser() {
	}

	/**
	 * 認証済みトークン を設定します.
	 *
	 * @param rememberme
	 *            認証済みトークン
	 */
	public void setRememberMe(String rememberme) {
		this.rememberMe = rememberme;
	}

	/**
	 * 認証済みトークン を取得します.
	 *
	 * @return 認証済みトークン
	 */
	@Column("RememberMe")
	public String getRememberMe() {
		return this.rememberMe;
	}

	/**
	 * ユーザID を設定します.
	 *
	 * @param userid
	 *            ユーザID
	 */
	@Column("UserID")
	public void setUserID(Long userid) {
		this.userID = userid;
	}

	/**
	 * ユーザID を取得します.
	 *
	 * @return ユーザID
	 */
	public Long getUserID() {
		return this.userID;
	}

	/**
	 * 登録日時 を設定します.
	 *
	 * @param registeredat
	 *            登録日時
	 */
	public void setRegisteredAt(Timestamp registeredat) {
		this.registeredAt = registeredat;
	}

	/**
	 * 登録日時 を取得します.
	 *
	 * @return 登録日時
	 */
	@Column("RegisteredAt")
	public Timestamp getRegisteredAt() {
		return this.registeredAt;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((rememberMe == null) ? 0 : rememberMe.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		AuthorizedUser other = (AuthorizedUser) obj;
		if (rememberMe == null) {
			if (other.rememberMe != null) {
				return false;
			}
		} else if (!rememberMe.equals(other.rememberMe)) {
			return false;
		}
		return true;
	}

	/* ***********************************************************************>> */
	/** XXXX */
	private StoredAccessToken token = null;
	/**
	 * XXXXを取得します。<BR>
	 * @return XXXX
	 */
	public StoredAccessToken getToken(){ return token; }
	/**
	 * XXXXを設定します。<BR>
	 * @param s 設定値<BR>
	 */
	@Relation(relationNo = 0, relationKey = "UserID")
	public void setToken(StoredAccessToken s){ token = s; }

}
