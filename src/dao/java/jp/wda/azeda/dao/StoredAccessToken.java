package jp.wda.azeda.dao;

import java.io.Serializable;
import java.sql.Timestamp;

import org.seasar.dao.annotation.tiger.Bean;
import org.seasar.dao.annotation.tiger.Column;

/**
 * アクセストークン モデルクラス.
 *
 * @author generated by ERMaster
 * @version $Id$
 */
@Bean(table="StoredAccessTokens")
public class StoredAccessToken implements Serializable {
	/** */
	private static final long serialVersionUID = -8649588336840701408L;

	/** ユーザID. */
	private Long userID;

	/** アカウント. */
	private String account;

	/** アクセストークン. */
	private String accessToken;

	/** AccessTokenSecret. */
	private String accessTokenSecret;

	/** 登録日時. */
	private Timestamp registeredAt;

	/** 更新日時. */
	private Timestamp updatedAt;

	/**
	 * コンストラクタ.
	 */
	public StoredAccessToken() {
		super();
	}

	/**
	 * ユーザID を設定します.
	 *
	 * @param userid
	 *            ユーザID
	 */
	public void setUserID(Long userid) {
		this.userID = userid;
	}

	/**
	 * ユーザID を取得します.
	 *
	 * @return ユーザID
	 */
	@Column("UserID")
	public Long getUserID() {
		return this.userID;
	}

	/**
	 * アカウント を設定します.
	 *
	 * @param account
	 *            アカウント
	 */
	public void setAccount(String account) {
		this.account = account;
	}

	/**
	 * アカウント を取得します.
	 *
	 * @return アカウント
	 */
	@Column("Account")
	public String getAccount() {
		return this.account;
	}

	/**
	 * アクセストークン を設定します.
	 *
	 * @param accesstoken
	 *            アクセストークン
	 */
	public void setAccessToken(String accesstoken) {
		this.accessToken = accesstoken;
	}

	/**
	 * アクセストークン を取得します.
	 *
	 * @return アクセストークン
	 */
	@Column("AccessToken")
	public String getAccessToken() {
		return this.accessToken;
	}

	/**
	 * AccessTokenSecret を設定します.
	 *
	 * @param accesstokensecret
	 *            AccessTokenSecret
	 */
	public void setAccessTokenSecret(String accesstokensecret) {
		this.accessTokenSecret = accesstokensecret;
	}

	/**
	 * AccessTokenSecret を取得します.
	 *
	 * @return AccessTokenSecret
	 */
	@Column("AccessTokenSecret")
	public String getAccessTokenSecret() {
		return this.accessTokenSecret;
	}

	/**
	 * 登録日時 を設定します.
	 *
	 * @param registeredat
	 *            登録日時
	 */
	public void setRegisteredAt(Timestamp registeredat) {
		this.registeredAt = registeredat;
	}

	/**
	 * 登録日時 を取得します.
	 *
	 * @return 登録日時
	 */
	@Column("RegisteredAt")
	public Timestamp getRegisteredAt() {
		return this.registeredAt;
	}

	/**
	 * 更新日時 を設定します.
	 *
	 * @param updatedat
	 *            更新日時
	 */
	public void setUpdatedAt(Timestamp updatedat) {
		this.updatedAt = updatedat;
	}

	/**
	 * 更新日時 を取得します.
	 *
	 * @return 更新日時
	 */
	@Column("UpdatedAt")
	public Timestamp getUpdatedAt() {
		return this.updatedAt;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((userID == null) ? 0 : userID.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		StoredAccessToken other = (StoredAccessToken) obj;
		if (userID == null) {
			if (other.userID != null) {
				return false;
			}
		} else if (!userID.equals(other.userID)) {
			return false;
		}
		return true;
	}

}
